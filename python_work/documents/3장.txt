1. eval함수와 input함수를 잘 묶어서 사용하면 프로그램 사용자로부터 산술 연산이 가능한 '수'를 입력 받을 수 있음에 대해 본문에서 설명하였다.
따라서 이를 근거로 다음의 실행 흐름을 보이는 예를 작성해보자(아래에서 1.24와 3.12는 프로그램 사용자가 입력한 값이다.)
>>__________
첫번째 입력:1.24
>>__________
두번째 입력:3.12
>>__________
두입력의합:4.36
위의 실행 흐름에서는 프로그램 사용자가 입력한 두 실수 1.24와 3.12를 대상으로 산술 덧셈이 되었음을 보이고 있다. 그럼 이러한 결과를 보이도록 위의 빈공간을 채워보자.

a = input("첫번째입력")
b = input("두번쨰입력")
print("두입력의 합 : ",eval(a)+eval(b))

2. 1,3,5,7,9의 합을 계산해서 그 결과를 출력하는 코드를 for루프를 기반으로 작성해보자.

3. 1부터 10까지의 곱의 결과를 계산해서 그 결과를 출력하는 코드를 for 루프를 기반으로 작성해보자.

4. 구구단에서 7단 전부를 출력하는 코드를 for루프를 기반으로 작성해보자.

5. 구구단 7단을 전부 출력하되 거꾸로(7*9 = 63부터) 출력하는 코드를 for 루프를 기반으로 작성해보자.

6. 다음 수식의 결과를 계산해서 그 값을 반환하는 함수를 for와 range 기반으로 정의해보자
x의y승
예를 들어서 함수의 이름이 exp라 할때, exp(2,3)의 형태로 호출되면 2*2*2=8 이므로 8이 반환 되어야 한다. 

7. "반갑습니다"를 여러 번 출력하는 greet이름의 함수를 만들어보자. 단, 몇 번 출력할지는 프로그램 사용자에게 묻고 입력받는 형태로 작성하자. 즉 함수가 호출되면 다음과 같은 실행 흐름을 보여야 한다.
>> greet()
인사를 몇번 할까요? 2
반갑습니다
반갑습니다.