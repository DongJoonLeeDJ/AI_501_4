1. 다음은 빈 리스트를 만들어서 그 안에 1,2,3을 넣었다가 넣은 순서대로 꺼내는 코드의 실행흐름이다.
>>> st = []
>>> __________ # 리스트에 1 추가
>>> __________ # 리스트에 2 추가
>>> __________ # 리스트에 3 추가
>>> st
[1,2,3]
>>> __________ # 리스트에 1삭제
1
>>> __________ # 리스트에 2삭제
2
>>> __________ # 리스트에 3삭제
3
>>> st
[]
위의 실행 흐름이 완성되도록 빈칸에 문장을 채워넣자

2. 위의 문제 1에서는 리스트에 다음 순서대로 값을 저장하고 꺼냈다.
저장순서 1,2,3
꺼낸순서 1,2,3

이번에는 다음 순서대로 이 값을 저장하고 꺼내도록 코드를 작성해보자
저장순서 1,2,3
꺼낸순서 3,2,1

즉, 문제 1에서와 달리 값을 뒤에서부터 꺼내는 코드를 작성하라는 뜻이다. 조금 힌트를 주자면, pop 함수에
전달하는 인덱스 값은 음수도 가능하다.

3. 리스트에 저장된 내용 전부를 삭제하는 clear 함수를 소개 하였다. 그리고 그 사용방법은 다음과 같다
예시)
st = [1,2,3,4]
st.clear()
print(st)
결과)
[]
그런데 이렇듯 리스트에 저장된 값을 싹 비우는 방법을 앞서 5장에서도 소개한바 있다. 슬라이싱 연산을
이용하는 방법인데, 이방법을 이요하는 형태의 위의 코드를 수정해보자.

4. 빈 리스트를 만들어서 그 안에 1부터 10까지 넣었다가, 다시 1부터 10까지 꺼내는(삭제하는) 코드를 만들어보자
단, 이번에는 넣고 꺼내야 할 값으 많으니 for 루프를 이용하는 형태로 코드를 작성해보자.

5. 빈리스트를 만들어서 그 안에 1부터 10까지 넣었다가 다시 10부터 1까지 꺼내는(삭제하는) 코드를 만들어보자.
이번에도 문제 4와 마찬가지로 for 루프를 이용하자.

6. 다음은 하나의 리스트에 다른 리스트의 값 전부를 추가하는 코드이다.
예시)
 st= [1,2]
 st.extend([3,4,5])
 print(st)
결과)
 [1,2,3,4,5]

위의 예에서는 extend 함수를 사용했는데 이를 슬라이싱 연산을 이용하는 현태로 수정해보자.
참고로 다음 리스트에서는 세번째 값이 없다
st = [1,2]

그러나 다른 리스트 값 전부를 추가할 때에는 세번째 값이 있다고 가정하고 슬라이싱 연산을 진행하면 된다.
즉 세번째 값을 리스트 [3,4,5]의 내용으로 교체하는 슬라싱 연산문을 작성하면 된다.